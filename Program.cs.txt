/*
 MEMBERS
 Kelly Tiedt (602730) - Creates a method to determine if the applicants qualify for the game token credit
Jaden Van der lely (600690) - Implements the main menu using an Enum for the navigation
Jonathan Joubert (578085) - Creates a method to capture the applicants details
Mamello Lelaka (577497) - Creates a method to display the token qualification stats
Marco Brazao de Sousa (601587) - Does the validation and formatting for the above method
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Retroslice_M1
{
    public class details //Jonathan Joubert 578085
    {//initilising applicant details
        public string name { get; set; }
        public string age { get; set; }
        public string rank { get; set; }
        public string date { get; set; }
        public string pizza { get; set; }
        public string score { get; set; }
        public bool employment { get; set; }
        public string slushpreference { get; set; }
            public string slushconsumed { get; set; }

        //Jonathan Joubert 578085
        public details(string name, string age, string rank, string date, string pizza, string score, bool employment, string slushpreference, string slushconsumed)
        {//assigning applicant details
            this.name = name;
            this.age = age;
            this.rank = rank;
            this.date = date;
            this.pizza = pizza;
            this.score = score;
            this.employment = employment;
            this.slushpreference = slushpreference;
            this.slushconsumed = slushconsumed;
        }
    }

    public class retro //Jonathan Joubert 578085
    {//defining applicant details
        public static List<details> Getdetails()
        {
            var applicants = new List<details>();
            bool istrue = true;
            while (istrue)
            { //this method is for capturing the applicant's details and storing them in their respective variables.
                Console.WriteLine("Type in the applicant's details");
				
				Console.Write("name: ");
				string name = Console.ReadLine();
				
		if (name != string)
        { 
            Console.Write("Your name must be in alphabetical charaters.");
			Console.Write("name: ");
		    string name = Console.ReadLine();
        }
        else if (name == string)
        {
            Console.Write("age: ");
            string age = Console.ReadLine();                    //continue
        }

		if (age != int)
		{
		    Console.Write("You must enter a valid integer age.");
			Console.Write("age: ");
            string age = Console.ReadLine();
		}	
		else if (age == int)
	    {
		    Console.Write("rank: ");
		    string rank = Console.ReadLine();
		}


		if (rank != int)
		{
		    Console.Write("You must enter a valid rank.");
		    Console.Write("rank: ");
		    string rank = Console.ReadLine();			
		}	
	    else if (date == int)
		{
            Console.Write("starting date (YYYY/MM/DD): ");
            string date = Console.ReadLine();
		}


		if (date != DateTime)
		{
		    Console.Write("You must enter a valid integer date.");
            Console.Write("starting date (YYYY/MM/DD): ");
            string date = Console.ReadLine();			
		}	
		else if (date == DateTime)
		{
            Console.Write("amount of pizzas eaten: ");
            string pizza = Console.ReadLine();
		}

		if (pizza != int)
		{
		    Console.Write("You must enter a valid integer number.");
            Console.Write("amount of pizzas eaten: ");
            string pizza = Console.ReadLine();			
		}	
		else if (pizza == int)
		{
		    Console.Write("bowling high score: ");
		    string score = Console.ReadLine();
		}

		if (score != int)
		{
		    Console.Write("You must enter a valid integer number.");
		    Console.Write("bowling high score: ");
		    string score = Console.ReadLine();			
		}	
		else if (score == int)
		{
		    Console.Write("are they employed? (yes or no): ");
		    bool employment = Console.ReadLine().ToLower() == "yes";
		}				
			
        if (employment != bool)
		{
		    Console.Write("You must enter yes or no.");
		    Console.Write("are they employed? (yes or no): ");
		    bool employment = Console.ReadLine().ToLower() == "yes";			
		}  	
		else if (employment == bool)
		{
		    Console.Write("favourite slush puppy flavour: ");
		    string slushpreference = Console.ReadLine();
	    }			

        if (slushpreference != string)
		{
		    Console.Write("You must enter a flavour/colour.");
		    Console.Write("favourite slush puppy flavour: ");
		    string slushpreference = Console.ReadLine();			
		}	
		else if (slushpreference == string)
		{
		    Console.Write("amount of slush puppies drunk: ");
		    string slushconsumed = Console.ReadLine();
		}
				
		if (slushconsumed != int)
		{
		    Console.Write("You must enter an amount.");
            string slushconsumed = Console.ReadLine();
		}
        else if (slushconsumed == int)
		{
			string slushconsumed = Console.ReadLine();
		}	


                var applicant = new details(name, age, rank, date, pizza, score, employment, slushpreference, slushconsumed);
                applicants.Add(applicant);
                Console.WriteLine("");
                Console.Write("new application? (yes or no): "); 
    istrue = Console.ReadLine().ToLower() == "yes";
            }
            return applicants;
        }
    }

    //Qualified customers method
    public class CreditCheck      // Kelly Tiedt 602730
    {
        public static List<Details> GetQualifiedApplicants(List<Details> applicants)
        {
            var qualifiedApplicants = new List<Details>();

            foreach (var applicant in applicants)
            {
                bool isQualified = true;

                // Check employment status
                if (!applicant.employment && int.Parse(applicant.age) >= 18) 
                {
                    isQualified = false;
                }

                // Check loyalty duration (2 years)
                DateTime startingDate = DateTime.Parse(applicant.date);
                if ((DateTime.Now - startingDate).TotalDays / 365 < 2)
                {
                    isQualified = false;
                }

                // Check high score rank and bowling high score
                int highScoreRank = int.Parse(applicant.rank);
                int bowlingHighScore = int.Parse(applicant.score);
                if (highScoreRank <= 2000 && bowlingHighScore <= 1500)
                {
                    if ((highScoreRank + bowlingHighScore) / 2 <= 1200)
                    {
                        isQualified = false;
                    }
                }


                // Check pizza consumption (at least 3 per month)
                DateTime now = DateTime.Now;
                int monthsAsCustomer = ((now.Year - startingDate.Year) * 12) + now.Month - startingDate.Month;
                if (monthsAsCustomer == 0) monthsAsCustomer = 1;                       // To avoid division by zero
                if (int.Parse(applicant.pizza) / monthsAsCustomer < 3)
                {
                    isQualified = false;
                }

                // Check slush-puppy consumption (at least 4 per month)
                if (int.Parse(applicant.slushconsumed) / monthsAsCustomer < 4)
                {
                    isQualified = false;
                }

                // Check slush-puppy preference
                if (applicant.slushpreference == "Gooe Gulp Galore")
                {
                    isQualified = false;
                }

                if (isQualified)
                {
                    qualifiedApplicants.Add(applicant);
                }
            }

            return qualifiedApplicants;

    internal class Program
    {
        // Enum difined 
        enum MenuOption
        {
            GetDetails = 1,
            CheckCreditQualification,
            ShowStats,
            Exit
        }

        static void Main(string[] args)
        {
            //Created a list for saving aplicants and also test who qualified
            List<Details> applicants = new List<Details>();
            List<Details> qualifiedApplicants = new List<Details>();
            bool exit = false;
            // The while loop will continue until the Exit option is chosen in the Menu
            while (!exit)
            {
                Console.WriteLine("Retroslice Application Capture System");
                Console.WriteLine("1. Capture Details");
                Console.WriteLine("2. Check Game Token Credit Qualification");
                Console.WriteLine("3. Show Current Arcade & Bowling Stats");
                Console.WriteLine("4. Exit");
                Console.Write("Choose an option: ");
                // Using parse to convert string to integer for user input
                MenuOption option = (MenuOption)int.Parse(Console.ReadLine());

                //Using a swith case method to determine user inputs using the enum
                switch (option)
                {
                    //Option 1 in Enum
                    case MenuOption.GetDetails:
                        applicants = Retro.GetDetails();
                        break;

                    //Option 2 of Enum
                    case MenuOption.CheckCreditQualification:
                        qualifiedApplicants = [CreditCheck.GetQualifiedApplicants](applicants);
                        Console.WriteLine("Credit qualification check completed.");
                        break;

                    //Option 3 in Enum
                    //Display stat method needed ------------------------Mamello Lelaka your class and method name in []
                    case MenuOption.ShowStats:
                     // [](applicants, qualifiedApplicants);
                        break;

                     // Option 4
                    case MenuOption.Exit:
                        exit = true;
                        break;

                    //If not one of the options are chosen it will return a error meassage
                    default:
                        Console.WriteLine("Invalid option. Please try again.");
                        break;
                }

                Console.WriteLine();
            }
        }
    }
}

